# Generated by Django 5.1.6 on 2025-02-17 11:38

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Publicacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=100, unique=True, verbose_name='Título')),
                ('imagen', models.ImageField(blank=True, null=True, upload_to='Publicacion')),
                ('creado', models.DateTimeField(auto_now_add=True, null=True)),
                ('tipopub', models.CharField(choices=[('Noticia', 'Noticia'), ('Evento', 'Evento'), ('Documento', 'Documento'), ('Foro', 'Foro')], default='Noticia', max_length=9)),
            ],
            options={
                'verbose_name': 'Publicacion',
                'verbose_name_plural': 'Publicaciones',
                'db_table': 'publicacion',
                'ordering': ['-creado'],
            },
        ),
        migrations.CreateModel(
            name='EntidActor',
            fields=[
                ('idactor', models.AutoField(primary_key=True, serialize=False)),
                ('nombreactor', models.CharField(max_length=100, unique=True, verbose_name='Nombre de Entidad-Organización-Actor')),
                ('nombrecorto', models.CharField(max_length=20, unique=True, verbose_name='Nombre corto o Siglas de Entidad-Actor')),
                ('tipoactor', models.CharField(choices=[('ONG', 'No Gubernamental'), ('GUB', 'Gubernamental')], default='GUB', max_length=3)),
                ('pais', models.CharField(choices=[('Cuba', 'Cuba'), ('Alemania', 'Alemania'), ('Francia', 'Francia'), ('España', 'España'), ('Rusia', 'Rusia'), ('Holanda', 'Holanda'), ('Italia', 'Italia'), ('México', 'México'), ('E.E.U.U.', 'E.E.U.U.'), ('Canadá', 'Canadá'), ('Argentina', 'Argentina'), ('Venezuela', 'Venezuela'), ('Colombia', 'Colombia'), ('Perú', 'Rusia'), ('Bolivia', 'Bolivia'), ('Paraguay', 'Paraguay'), ('China', 'China'), ('Viet Nam', 'Viet Nam'), ('Austraila', 'Austraila'), ('Angola', 'Angola'), ('Bélgica', 'Bélgica'), ('Ecuador', 'Ecuador')], max_length=100, verbose_name='País procedencia de la entidad')),
                ('alcanc', models.CharField(choices=[('Municipal', 'Municipal'), ('Provincial', 'Provincial'), ('Nacional', 'Nacional')], default='Municipal', max_length=10, verbose_name='Alcance del SIGC')),
                ('altinfluenc', models.BooleanField(default=False, verbose_name='Alta Influencia')),
                ('bajdepend', models.BooleanField(default=False, verbose_name='Baja dependencia')),
            ],
            options={
                'verbose_name': 'Entidad_Actor',
                'verbose_name_plural': 'Entidad_Actores',
                'db_table': 'entidactor',
                'ordering': ['nombreactor'],
            },
        ),
        migrations.CreateModel(
            name='Grupo',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.group')),
                ('nombregrupo', models.CharField(choices=[('Invitad@', 'Invitad@'), ('Evaluador(a)', 'Evaluador(a)'), ('Editor(a)', 'Editor(a)'), ('Consultor(a)', 'Consultor(a)'), ('Expert@', 'Expert@')], default='Invitados', max_length=20, verbose_name='Grupo de usuario')),
            ],
            options={
                'verbose_name': 'Grupo',
            },
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='Municipio',
            fields=[
                ('idmun', models.AutoField(primary_key=True, serialize=False)),
                ('nombremun', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Municipio',
                'verbose_name_plural': 'Municipios',
                'db_table': 'municipio',
            },
        ),
        migrations.CreateModel(
            name='Oace',
            fields=[
                ('idoace', models.AutoField(primary_key=True, serialize=False)),
                ('siglas', models.CharField(max_length=10, unique=True, verbose_name='Siglas')),
                ('nombreoace', models.CharField(max_length=60, unique=True, verbose_name='Nombre del Organismo de Administración Central del Estado')),
            ],
            options={
                'verbose_name': 'Organismo del Estado',
                'verbose_name_plural': 'Organismos del Estado',
                'db_table': 'oace',
                'ordering': ['nombreoace'],
            },
        ),
        migrations.CreateModel(
            name='Provincia',
            fields=[
                ('idprov', models.AutoField(primary_key=True, serialize=False)),
                ('nombreprov', models.CharField(max_length=100, unique=True)),
                ('siglas', models.CharField(blank=True, max_length=4, null=True)),
            ],
            options={
                'verbose_name': 'Provincia',
                'verbose_name_plural': 'Provincias',
                'db_table': 'provincia',
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('ingreso', models.DateField(auto_now_add=True)),
                ('genero', models.CharField(choices=[('F', 'Femenino'), ('M', 'Masculino'), ('O', 'Otro')], default='', max_length=10, null=True, verbose_name='Género')),
                ('grdctfacad', models.CharField(blank=True, choices=[('Básica', 'Básica'), ('Secundaria', 'Secundaria'), ('Pre/Técnico medio', 'Pre/Técnico medio'), ('Téc. superior', 'Téc. superior'), ('Univesitario', 'Universitario'), ('MSc./Esp.postg', 'MSc./Esp.postg'), ('Dr.C. especif.', 'Dr.C. especif.'), ('Dr.Cs.', 'Dr.Cs.')], max_length=20, null=True, verbose_name='Último título académico o científico alcanzado')),
                ('princresult', models.TextField(blank=True, null=True, verbose_name='Principales resultados científicos')),
                ('foto', models.ImageField(blank=True, default='', null=True, upload_to='Profiles')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('grupo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='psigcmod.grupo', verbose_name='Grupo de usuarios')),
                ('municipio', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='psigcmod.municipio', verbose_name='Municipio de procedencia')),
            ],
            options={
                'verbose_name': 'Usuario',
                'db_table': 'usuario',
                'ordering': ['last_name', 'first_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AreaConocimiento',
            fields=[
                ('idareaconoc', models.AutoField(primary_key=True, serialize=False)),
                ('nombreareaconoc', models.CharField(max_length=100, verbose_name='Nombre del área ')),
                ('descriparea', models.TextField(blank=True, default='Descripción aún sin especificar', null=True, verbose_name='Descripción del tema ')),
                ('expertos', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='Experto(s) en el tema')),
            ],
            options={
                'verbose_name': 'Área de conocimiento',
                'verbose_name_plural': 'Áreas de conocimiento',
                'db_table': 'areaconoc',
                'ordering': ['nombreareaconoc'],
            },
        ),
        migrations.CreateModel(
            name='ComentPost',
            fields=[
                ('idcoment', models.AutoField(primary_key=True, serialize=False)),
                ('comentcont', models.TextField(verbose_name='Comentario')),
                ('postdate', models.DateTimeField(auto_now_add=True)),
                ('estado', models.CharField(choices=[('Pendiente', 'Pendiente'), ('Aceptado', 'Aceptado'), ('Rechazado', 'Rechazado')], default='Pendiente', max_length=10)),
                ('comentautor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Comentario',
                'db_table': 'comentpost',
                'ordering': ['-postdate'],
            },
        ),
        migrations.CreateModel(
            name='ComentReply',
            fields=[
                ('idrepl', models.AutoField(primary_key=True, serialize=False)),
                ('replycont', models.TextField(verbose_name='Respuesta')),
                ('replydate', models.DateTimeField(auto_now_add=True)),
                ('estado', models.CharField(choices=[('Pendiente', 'Pendiente'), ('Aceptado', 'Aceptado'), ('Rechazado', 'Rechazado')], default='Pendiente', max_length=10)),
                ('comentforo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='respuestas', to='psigcmod.comentpost')),
                ('replyautor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Respuesta',
                'db_table': 'replypost',
                'ordering': ['-replydate'],
            },
        ),
        migrations.CreateModel(
            name='Documento',
            fields=[
                ('publicacion_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='psigcmod.publicacion')),
                ('iddoc', models.AutoField(primary_key=True, serialize=False)),
                ('resegna', models.CharField(max_length=200, verbose_name='Reseña del contenido')),
                ('archivo', models.FileField(upload_to='Archivos/', verbose_name='Documento a subir')),
            ],
            options={
                'verbose_name': 'Documento',
                'db_table': 'documento',
            },
            bases=('psigcmod.publicacion',),
        ),
        migrations.CreateModel(
            name='Evento',
            fields=[
                ('publicacion_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='psigcmod.publicacion')),
                ('idevento', models.AutoField(primary_key=True, serialize=False)),
                ('lugar', models.CharField(default='Aún por definir...', max_length=50, verbose_name='Lugar')),
                ('descrip', models.TextField(default='Esté atento a este evento, próximo a celebrarse', null=True, verbose_name='Descripción')),
                ('fechainicio', models.DateTimeField(blank=True, default='', null=True)),
                ('fechafin', models.DateTimeField(blank=True, default='', null=True)),
            ],
            options={
                'verbose_name': 'Evento',
                'db_table': 'evento',
                'ordering': ['fechainicio'],
            },
            bases=('psigcmod.publicacion',),
        ),
        migrations.CreateModel(
            name='Noticia',
            fields=[
                ('publicacion_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='psigcmod.publicacion')),
                ('idpost', models.AutoField(primary_key=True, serialize=False)),
                ('contenido', models.TextField(default='', null=True, verbose_name='Contenido de la publicación')),
            ],
            options={
                'verbose_name': 'Noticia',
                'verbose_name_plural': 'Noticias',
                'db_table': 'noticia',
                'ordering': ['-creado'],
            },
            bases=('psigcmod.publicacion',),
        ),
        migrations.AddField(
            model_name='publicacion',
            name='autor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='publicacion',
            name='entidactor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='psigcmod.entidactor', verbose_name='Entidad-Actor que publica'),
        ),
        migrations.AddField(
            model_name='entidactor',
            name='coordinador',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Coordinador o representante principal'),
        ),
        migrations.CreateModel(
            name='DemandaBD',
            fields=[
                ('iddemanda', models.AutoField(primary_key=True, serialize=False)),
                ('tipodemand', models.CharField(choices=[('info', 'de Información'), ('capac', 'de Capacitación'), ('tran', 'de Transferencia de Tecnología'), ('otro', 'de otro tipo de demanda')], max_length=10, verbose_name='Categoría o tipo de demanda')),
                ('descripcion', models.TextField(default='Describa la(s) necesidad(es) y posibles propuesta de soluciones', verbose_name='Descripción de la demanda')),
                ('respuesta', models.TextField(blank=True, null=True, verbose_name='Respuesta o solución a la demanda')),
                ('fechasolic', models.DateTimeField(auto_now_add=True)),
                ('areaconoc', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='psigcmod.areaconocimiento', verbose_name='Área del conocimiento')),
                ('usuario', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('entidactor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='psigcmod.entidactor', verbose_name='Entidad-Actor')),
            ],
            options={
                'verbose_name': 'Demanda solicitada',
                'verbose_name_plural': 'Demandas solicitadas',
                'db_table': 'demandabd',
            },
        ),
        migrations.CreateModel(
            name='Foro',
            fields=[
                ('idforo', models.AutoField(primary_key=True, serialize=False)),
                ('tema', models.CharField(max_length=500, verbose_name='Tema o pregunta de debate')),
                ('creado', models.DateTimeField(auto_now_add=True, null=True)),
                ('areacon', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='psigcmod.areaconocimiento', verbose_name='Área del conocimiento')),
                ('dlikes', models.ManyToManyField(related_name='dlikes', to=settings.AUTH_USER_MODEL, verbose_name='Me gusta')),
                ('entidactor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='psigcmod.entidactor', verbose_name='Entidad-Actor que publica')),
                ('likes', models.ManyToManyField(related_name='likes', to=settings.AUTH_USER_MODEL, verbose_name='Me gusta')),
                ('moderador', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Foro',
                'db_table': 'foro',
            },
        ),
        migrations.AddField(
            model_name='comentpost',
            name='forodebate',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comentarios', to='psigcmod.foro'),
        ),
        migrations.AddField(
            model_name='entidactor',
            name='munic',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='psigcmod.municipio', verbose_name='Municipio de la Entidad-Actor'),
        ),
        migrations.CreateModel(
            name='ContactoBD',
            fields=[
                ('idcontact', models.AutoField(primary_key=True, serialize=False)),
                ('nombre', models.CharField(max_length=100, verbose_name='Nombre(s) y apellidos*')),
                ('ecorreo', models.EmailField(max_length=100, verbose_name='Correo electrónico*')),
                ('asunto', models.CharField(max_length=200, verbose_name='Tema a tratar ')),
                ('contenido', models.TextField(verbose_name='Contenido del mensaje')),
                ('respuesta', models.TextField(blank=True, null=True, verbose_name='Respuesta')),
                ('fechaenvio', models.DateField(auto_now_add=True)),
                ('municipio', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='psigcmod.municipio', verbose_name='Municipio de procedencia')),
            ],
            options={
                'verbose_name': 'Contactos enviado',
                'verbose_name_plural': 'Contactos enviados',
                'db_table': 'contacto',
                'ordering': ['-fechaenvio'],
            },
        ),
        migrations.AddField(
            model_name='entidactor',
            name='oace',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='psigcmod.oace', verbose_name='Organismo Administración Central Estado al que pertenece (entidad nacional)'),
        ),
        migrations.CreateModel(
            name='ProgDesarrollo',
            fields=[
                ('idprog', models.AutoField(primary_key=True, serialize=False)),
                ('nombreprog', models.CharField(max_length=100, unique=True, verbose_name='Nombre del programa de desarrollo')),
                ('descriprog', models.TextField(blank=True, default='Descripción aún sin especificar', null=True, verbose_name='Descripción del programa')),
                ('oacerector', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='psigcmod.oace', verbose_name='Organismo rector')),
            ],
            options={
                'verbose_name': 'Programa de desarrollo',
                'verbose_name_plural': 'Programas de desarrollo',
                'db_table': 'progdesarrollo',
                'ordering': ['nombreprog'],
            },
        ),
        migrations.AddField(
            model_name='entidactor',
            name='prgdesarr',
            field=models.ManyToManyField(related_name='programas', to='psigcmod.progdesarrollo', verbose_name='Programa(s) de desarrollo que ejecuta'),
        ),
        migrations.CreateModel(
            name='Procedencia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('municipio', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='psigcmod.municipio', verbose_name='Municipio de procedencia*')),
                ('provincia', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='psigcmod.provincia', verbose_name='Provincia de procedencia*')),
            ],
        ),
        migrations.AddField(
            model_name='municipio',
            name='prov',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='psigcmod.provincia'),
        ),
        migrations.CreateModel(
            name='InfoEjes',
            fields=[
                ('idinfo', models.AutoField(primary_key=True, serialize=False)),
                ('fechaRegist', models.DateField(verbose_name='Fecha del registro')),
                ('fechabase', models.BooleanField(default=False, verbose_name='Fecha base')),
                ('totalPers', models.PositiveSmallIntegerField(blank=True, default=0, null=True, verbose_name='Total de Personas')),
                ('cantMujeres', models.PositiveSmallIntegerField(default=0, verbose_name='Féminas')),
                ('cant18_35', models.PositiveSmallIntegerField(default=0, verbose_name='Edades 18-35')),
                ('cant36_55', models.PositiveSmallIntegerField(default=0, verbose_name='Edades 36-55')),
                ('cant56_70', models.PositiveSmallIntegerField(default=0, verbose_name='Edades 56-70')),
                ('cant_70', models.PositiveSmallIntegerField(default=0, verbose_name='Edades +70')),
                ('cantUniv', models.PositiveSmallIntegerField(default=0, verbose_name='Universitarios')),
                ('cantDrC', models.PositiveSmallIntegerField(default=0, verbose_name='Doctores en Ciencias')),
                ('cantMSc', models.PositiveSmallIntegerField(default=0, verbose_name='Masters en Ciencias.')),
                ('cantEsPost', models.PositiveSmallIntegerField(default=0, verbose_name='Especialidad de Postgrado')),
                ('cantTNS', models.PositiveSmallIntegerField(default=0, verbose_name='Técnicos Nivel Superior')),
                ('cantTM', models.PositiveSmallIntegerField(default=0, verbose_name='Técnicos Nivel Medio')),
                ('cantOb', models.PositiveSmallIntegerField(default=0, verbose_name='Obreros (Escuela de oficio)')),
                ('cantOC', models.PositiveSmallIntegerField(default=0, verbose_name='Obreros capacitados')),
                ('cantEspCap', models.PositiveSmallIntegerField(default=0, verbose_name='Especialistas capacitados')),
                ('cantPrdCap', models.PositiveSmallIntegerField(default=0, verbose_name='Productores capacitados')),
                ('cantCuadCap', models.PositiveSmallIntegerField(default=0, verbose_name='Cuadros capacitados')),
                ('cantResCuad', models.PositiveSmallIntegerField(default=0, verbose_name='Reservas cuadros capacitados')),
                ('cantCTA', models.PositiveSmallIntegerField(default=0, verbose_name='CTAs-dedicados al programa')),
                ('cantIP_CTA', models.PositiveSmallIntegerField(default=0, verbose_name='Innovaciones propuestas a CTAs')),
                ('cantIA_CTA', models.PositiveSmallIntegerField(default=0, verbose_name='Innovaciones avaladas por CTAs')),
                ('cantECTI', models.PositiveSmallIntegerField(default=0, verbose_name='Nuevas ECTIs')),
                ('cantPECTIC', models.PositiveSmallIntegerField(default=0, verbose_name='Personas atienden ETICs y/o CTAs')),
                ('cantPAP', models.PositiveSmallIntegerField(default=0, verbose_name='Proyectos Asociados a Programa')),
                ('cantPNAP', models.PositiveSmallIntegerField(default=0, verbose_name='Proyectos no Asociados a Programa')),
                ('cantPCI', models.PositiveSmallIntegerField(default=0, verbose_name='Proyectos con Cooperacion Internacional')),
                ('cantPDL', models.PositiveSmallIntegerField(default=0, verbose_name='Proyectos de Desarrollo Local')),
                ('cantPSP', models.PositiveSmallIntegerField(default=0, verbose_name='Proyectos del Sector Productivo')),
                ('finanPAP', models.FloatField(default=0, verbose_name='Financiamiento a PNAP')),
                ('finanPNAP', models.FloatField(default=0, verbose_name='Financiamiento a PAP')),
                ('finanPCI', models.FloatField(default=0, verbose_name='Financiamiento a PCI')),
                ('finanPDL', models.FloatField(default=0, verbose_name='Financiamiento a PDL')),
                ('finanPSP', models.FloatField(default=0, verbose_name='Financiamiento a PSP')),
                ('cantRCLA', models.PositiveSmallIntegerField(default=0, verbose_name='Resultados introducidos')),
                ('cantILA', models.PositiveSmallIntegerField(default=0, verbose_name='Innovaciones introducidas')),
                ('cantTec', models.PositiveSmallIntegerField(default=0, verbose_name='Tecnologías generadas')),
                ('cantProc', models.PositiveSmallIntegerField(default=0, verbose_name='Procesos generados')),
                ('cantProd', models.PositiveSmallIntegerField(default=0, verbose_name='Producciones generadas')),
                ('cantRDExt', models.PositiveSmallIntegerField(default=0, verbose_name='Resultados divulgados extensionista')),
                ('cantRRS', models.PositiveSmallIntegerField(default=0, verbose_name='Resultados en libros,revistas,redes sociales')),
                ('cantAccExt', models.PositiveSmallIntegerField(default=0, verbose_name='Acciones extensionistas')),
                ('cantRING', models.PositiveSmallIntegerField(default=0, verbose_name='Redes grupos y nodos de innovación')),
                ('cantPDiv', models.PositiveSmallIntegerField(default=0, verbose_name='Personas vinculadas a divulgación/extensionismo')),
                ('entidactor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entidactores', to='psigcmod.entidactor', verbose_name='Entidad-Actor')),
                ('munic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='municipios', to='psigcmod.municipio', verbose_name='Municipio SIGC')),
            ],
            options={
                'verbose_name': 'Información de los ejes',
                'db_table': 'infoejes',
                'ordering': ['-fechaRegist', 'entidactor', 'munic'],
                'unique_together': {('fechaRegist', 'entidactor', 'munic')},
            },
        ),
    ]
